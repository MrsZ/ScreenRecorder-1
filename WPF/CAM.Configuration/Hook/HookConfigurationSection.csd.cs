//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CAM.Configuration
{
    
    
    /// <summary>
    /// The Hook Configuration Section.
    /// </summary>
    public partial class Hook : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the Hook Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string HookSectionName = "hook";
        
        /// <summary>
        /// The XML path of the Hook Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string HookSectionPath = "hook";
        
        /// <summary>
        /// Gets the Hook instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::CAM.Configuration.Hook Instance
        {
            get
            {
                return ((global::CAM.Configuration.Hook)(global::System.Configuration.ConfigurationManager.GetSection(global::CAM.Configuration.Hook.HookSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Hook.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Hook.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Commands Property
        /// <summary>
        /// The XML name of the <see cref="Commands"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CommandsPropertyName = "commands";
        
        /// <summary>
        /// Gets or sets the Commands.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Commands.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Hook.CommandsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CAM.Configuration.Commands Commands
        {
            get
            {
                return ((global::CAM.Configuration.Commands)(base[global::CAM.Configuration.Hook.CommandsPropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Hook.CommandsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CAM.Configuration
{
    
    
    /// <summary>
    /// The Executable Configuration Element.
    /// </summary>
    public partial class Executable : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Executable.NamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Executable.NamePropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Executable.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region ExeLocation Property
        /// <summary>
        /// The XML name of the <see cref="ExeLocation"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ExeLocationPropertyName = "exeLocation";
        
        /// <summary>
        /// Gets or sets the ExeLocation.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The ExeLocation.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Executable.ExeLocationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExeLocation
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Executable.ExeLocationPropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Executable.ExeLocationPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CAM.Configuration
{
    
    
    /// <summary>
    /// The Arguments Configuration Element.
    /// </summary>
    public partial class Arguments : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region CommandLine Property
        /// <summary>
        /// The XML name of the <see cref="CommandLine"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CommandLinePropertyName = "commandLine";
        
        /// <summary>
        /// Gets or sets the CommandLine.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The CommandLine.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Arguments.CommandLinePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string CommandLine
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Arguments.CommandLinePropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Arguments.CommandLinePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CAM.Configuration
{
    
    
    /// <summary>
    /// A collection of Command instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::CAM.Configuration.Command), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::CAM.Configuration.Commands.CommandPropertyName)]
    public partial class Commands : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::CAM.Configuration.Command"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CommandPropertyName = "command";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::CAM.Configuration.Commands.CommandPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::CAM.Configuration.Commands.CommandPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::CAM.Configuration.Command)(element)).HookId;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::CAM.Configuration.Command"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::CAM.Configuration.Command"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::CAM.Configuration.Command();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::CAM.Configuration.Command"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::CAM.Configuration.Command"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::CAM.Configuration.Command this[int index]
        {
            get
            {
                return ((global::CAM.Configuration.Command)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::CAM.Configuration.Command"/> with the specified key.
        /// </summary>
        /// <param name="hookId">The key of the <see cref="global::CAM.Configuration.Command"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::CAM.Configuration.Command this[object hookId]
        {
            get
            {
                return ((global::CAM.Configuration.Command)(base.BaseGet(hookId)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::CAM.Configuration.Command"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="command">The <see cref="global::CAM.Configuration.Command"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::CAM.Configuration.Command command)
        {
            base.BaseAdd(command);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::CAM.Configuration.Command"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="command">The <see cref="global::CAM.Configuration.Command"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::CAM.Configuration.Command command)
        {
            base.BaseRemove(this.GetElementKey(command));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::CAM.Configuration.Command"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::CAM.Configuration.Command"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::CAM.Configuration.Command GetItemAt(int index)
        {
            return ((global::CAM.Configuration.Command)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::CAM.Configuration.Command"/> with the specified key.
        /// </summary>
        /// <param name="hookId">The key of the <see cref="global::CAM.Configuration.Command"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::CAM.Configuration.Command GetItemByKey(string hookId)
        {
            return ((global::CAM.Configuration.Command)(base.BaseGet(((object)(hookId)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace CAM.Configuration
{
    
    
    /// <summary>
    /// The Command Configuration Section.
    /// </summary>
    public partial class Command : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the Command Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CommandSectionName = "command";
        
        /// <summary>
        /// The XML path of the Command Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CommandSectionPath = "command";
        
        /// <summary>
        /// Gets the Command instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::CAM.Configuration.Command Instance
        {
            get
            {
                return ((global::CAM.Configuration.Command)(global::System.Configuration.ConfigurationManager.GetSection(global::CAM.Configuration.Command.CommandSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Command.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Command.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region HookId Property
        /// <summary>
        /// The XML name of the <see cref="HookId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string HookIdPropertyName = "hookId";
        
        /// <summary>
        /// Gets the HookId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The HookId.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Command.HookIdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string HookId
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Command.HookIdPropertyName]));
            }
        }
        #endregion
        
        #region Mode Property
        /// <summary>
        /// The XML name of the <see cref="Mode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ModePropertyName = "mode";
        
        /// <summary>
        /// Gets or sets the Mode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Mode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Command.ModePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Mode
        {
            get
            {
                return ((string)(base[global::CAM.Configuration.Command.ModePropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Command.ModePropertyName] = value;
            }
        }
        #endregion
        
        #region Executable Property
        /// <summary>
        /// The XML name of the <see cref="Executable"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ExecutablePropertyName = "executable";
        
        /// <summary>
        /// Gets or sets the Executable.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Executable.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Command.ExecutablePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CAM.Configuration.Executable Executable
        {
            get
            {
                return ((global::CAM.Configuration.Executable)(base[global::CAM.Configuration.Command.ExecutablePropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Command.ExecutablePropertyName] = value;
            }
        }
        #endregion
        
        #region Arguments Property
        /// <summary>
        /// The XML name of the <see cref="Arguments"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ArgumentsPropertyName = "arguments";
        
        /// <summary>
        /// Gets or sets the Arguments.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Arguments.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CAM.Configuration.Command.ArgumentsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CAM.Configuration.Arguments Arguments
        {
            get
            {
                return ((global::CAM.Configuration.Arguments)(base[global::CAM.Configuration.Command.ArgumentsPropertyName]));
            }
            set
            {
                base[global::CAM.Configuration.Command.ArgumentsPropertyName] = value;
            }
        }
        #endregion
    }
}
